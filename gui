#!/bin/bash
APP_STORE_NAME="YadStore"
APP_STORE_WIDTH=350
APP_STORE_HEIGHT=600
DIRECTORY="$(dirname "$(readlink -f "$0")")"
categories_dir="${DIRECTORY}/Categories"
yadstore_conf_dir="${DIRECTORY}/etc"
yadstore_conf_file="${yadstore_conf_dir}/config"
installed_name="installed"
installed_dir="${categories_dir}/${installed_name}"

if ! command -v yad &>/dev/null; then
    error "YAD needs to be installed to run YadAppsStore."
fi

declare -A categories
declare -A category_apps

check_if_installed() {
	app_name="${1-}"
	category_is="${2-}"
	mkdir -p "${installed_dir}"
	category_dir="${categories_dir}/${category_is}"
	app_dir="${category_dir}/${app_name}"
	install_this=""
	check_this="$(cat "${app_dir}/check")"
	
	if [[ "$check_this" == *".desktop" ]];then 
		[ -f "$HOME/.local/share/applications/${check_this}" ] && install_this="true"
		[ -f "/usr/share/applications/${check_this}" ] && install_this="true"
	elif [[ "$check_this" == *"."* ]];then
		if command -v flatpak &>/dev/null ;then 
			flatpak list | grep ${check_this} && install_this="true" 
		fi
	elif command -v ${check_this} &>/dev/null ;then 
		install_this="true"
	else
		dpkg-query -s ${check_this} &>/dev/null && install_this="true" 
	fi
	
	if [[ "$install_this" == "true" ]] && [[ "${category_is}" != "${installed_name}" ]];then
		sudo mv "${category_dir}/$app_name" "${installed_dir}"
	elif [[ "$install_this" != "true" ]] && [[ "${category_is}" = "${installed_name}" ]];then
		category_is="$(cat "${DIRECTORY}/apps/${app_name}/category")"
		category_dir="${categories_dir}/${category_is}"
		sudo mv "${installed_dir}/$app_name" "${category_dir}"
	fi
}

check_all_if_installed() {
	cd "${categories_dir}"
    for category_is in *; do
    	cd "${categories_dir}"/"${category_is}"
    	for app_name in *; do
    		check_if_installed "${app_name}" "${category_is}"
    	done
    done
    show_app_store
}

source_ext_functions_and_var(){
	set -a
	source "${yadstore_conf_file}"
	source "${DIRECTORY}/tools/functions"
	set +a
}

read_categories() {
    for category in ${categories_dir}/*; do
    	cd "${category}"
    	category=$(basename "$category")
    	categories["$category"]=""
    	for app_name in *; do
        	if [ -n "${categories[$category]}" ]; then
            	categories["$category"]+=" $app_name"
            	category_apps["$category"]+="|$app_name"
            else
            	categories["$category"]="$app_name"
            	category_apps["$category"]="$app_name"
            fi
    	done
    done
}


get_app_description() {
    app_name="$1"
    description_file="${DIRECTORY}/apps/$app_name/description"
    if [ -e "$description_file" ]; then
        cat "$description_file"
    else
        echo "No description available."
    fi
}

get_app_creator() {
    app_name="$1"
    creator_file="${DIRECTORY}/apps/$app_name/creator"
    if [ -e "$creator_file" ]; then
        cat "$creator_file"
    else
        echo "No description available."
    fi
}

get_app_website() {
    app_name="$1"
    website_file="${DIRECTORY}/apps/$app_name/website"
    if [ -e "$website_file" ]; then
        cat "$website_file"
    else
        echo "No description available."
    fi
}
theme_get() {
    theme_file="${DIRECTORY}/etc/theme"
    if [ -e "$theme_file" ]; then
        cat "$theme_file"
    else
        echo ""
    fi
}

app_details_page() {
    selected_app_name="${1//|/}"
    app_directory="${DIRECTORY}/apps/$selected_app_name"
    app_icon="$app_directory/icon-48.png"
    description=$(get_app_description "$selected_app_name")
    creator=$(get_app_creator "$selected_app_name")
    website=$(get_app_website "$selected_app_name")
	if [ -d "${installed_dir}/${selected_app_name}" ]; then
		installed_or_uninstalled="uninstall"
		app_directory_category="${categories_dir}/$(cat "${DIRECTORY}/apps/$selected_app_name/category")"
		installed_or_uninstalled_command="(sudo true && \"${installed_dir}/${selected_app_name}/uninstall\") && (sudo mv \"${installed_dir}/${selected_app_name}\" \"${app_directory_category}\" && echo '$selected_app_name is uninstalled')"
	else
		installed_or_uninstalled="install"
		app_directory_installer="${categories_dir}/$(cat "${DIRECTORY}/apps/$selected_app_name/category")/$selected_app_name"
		installed_or_uninstalled_command="(sudo true && \"${app_directory_installer}/install\") && (sudo mv \"${app_directory_installer}\" \"${installed_dir}\" && echo '$selected_app_name is installed')"
	fi
    # Run yad command in the background without waiting for it to finish
    (
        GTK_THEME="${theme}" yad --class ${APP_STORE_NAME} --title="App Details" --width="450" --height="$APP_STORE_HEIGHT" --form \
            --text "<big><b>${selected_app_name}</b></big>\n<b>${creator}</b>\n<b><a href='${website}'>${website}</a></b>\n" \
            --field="<b>Description</b>:LBL" --field="$description:LBL" --no-edit --image="$app_icon" --window-icon="${DIRECTORY}/images/logo/logo-64.png" --image-on-top \
            --button="${installed_or_uninstalled}":10
    	exval=$?
	
    	if [ "$exval" == "10" ]; then
    		cd $HOME
    		bash -c "$installed_or_uninstalled_command"
    	fi
    )
}

show_categories() {
    list_items=()
    for category in "${!categories[@]}"; do
        category_icon="${DIRECTORY}/images/$category.png"
        list_items+=("$category_icon")
        list_items+=("$category")
    done

    selected_category_raw=$(GTK_THEME="${theme}" yad --text "Welcome to ${APP_STORE_NAME}\nThe app store that's simple to use." --width="$APP_STORE_WIDTH" --height="$APP_STORE_HEIGHT" --columns="2" \
        "${list_items[@]}" \
        --list --image="${DIRECTORY}/images/logo-64.png" --window-icon="${DIRECTORY}/images/logo/logo-64.png" --image-on-top --title "$APP_STORE_NAME" --column "Icon:IMG" --column "Category" --button "Show Apps:3" --button "Settings:4" --item-padding="10")

    selected_category="${selected_category_raw//|/}"
    echo "$selected_category"
}

show_apps_in_category() {
    while true; do
        if [ "$1" == "All Apps" ]; then
            # Show all apps in the "All Apps" category
            all_apps_list=()
            for app_dir in "${DIRECTORY}/apps/*"; do
                app_name=$(basename "$app_dir")
                app_icon="${DIRECTORY}/apps/$app_name/icon-24.png"
                all_apps_list+=("$app_icon")
                all_apps_list+=("$app_name")
            done

            selected_app_name=$(GTK_THEME="${theme}" yad --text "<big><b>$1</b></big>" --width="$APP_STORE_WIDTH" --height="$APP_STORE_HEIGHT" --columns="2" \
                --list --image="${DIRECTORY}/images/logo/logo-64.png" --window-icon="${DIRECTORY}/images/logo/logo-64.png" --image-on-top --title "$APP_STORE_NAME" --column "Icon:IMG" --column "Apps" --button="!${DIRECTORY}/images/button/back.png"!"Back:4" --separator="\n" "${all_apps_list[@]}" --no-headers)
        else
            apps_in_category="${category_apps["$1"]}"
            formatted_apps=()

            IFS='|' read -r -a app_list <<<"$apps_in_category"
            for app in "${app_list[@]}"; do
                app_icon="${DIRECTORY}/apps/$app/icon-24.png"
                formatted_apps+=("$app_icon")
                formatted_apps+=("$app")
            done

            selected_app_name=$(GTK_THEME="${theme}" yad --text "<big><b>Apps in $1 Category</b></big>" --width="$APP_STORE_WIDTH" --height="$APP_STORE_HEIGHT" --columns="2" \
                --list --image="${DIRECTORY}/images/logo/logo-64.png" --window-icon="${DIRECTORY}/images/logo/logo-64.png" --image-on-top --title "$APP_STORE_NAME" --column "Icon:IMG" --column "Apps" --button="!${DIRECTORY}/images/button/back.png"!"Back:4" --separator="\n" "${formatted_apps[@]}" --no-headers)
        fi

        button_clicked=$?
        selected_app=$(echo -n "$selected_app_name" | tr '\n' ' ' | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')
        echo "$button_clicked"
        if [ $button_clicked -eq 4 ]; then
            show_app_store
            break
        fi

        if [ -n "$selected_app" ]; then
            app_details_page "$selected_app"
        else
            show_app_store
            break
        fi
    done
}

show_app_store() {
    read_categories

    # Sort categories alphabetically and format with newlines
    sorted_categories=$(printf '%s\n' "${!categories[@]}" | sort)

    list_items=()
    list_items=("${DIRECTORY}/images/categories/All Apps.png" "All Apps")
    while IFS= read -r category; do
        category_icon="${DIRECTORY}/images/categories/$category.png" # Path to category icons
        list_items+=("$category_icon")
        list_items+=("$category")
    done <<<"$sorted_categories"

    # Fetching a random line from the announcements file
    random_announcement=$(shuf -n 1 ${DIRECTORY}/etc/announcements)

    # Search function
    search_apps() {
        query=$(GTK_THEME="${theme}" yad --title="Search Apps" --text="Enter app name:" --entry)
        if [ -n "$query" ]; then
            app_list=$(ls -w 1 "${DIRECTORY}/apps" | awk 'BEGIN {ORS="\n"} {print}')
            num_apps=$(echo "$app_list" | wc -l)
            num_apps=$((num_apps))
            echo "$num_apps"

            apps_found=()
            for app in "${DIRECTORY}"/apps/*; do
                app_name=$(basename "$app")
                if [[ "${app_name,,}" == *"${query,,}"* ]]; then
                    app_icon="${DIRECTORY}/apps/$app_name/icon-24.png"
                    app_category_file="${app}/category"
                    app_category=$(head -n 1 "${app_category_file}")
                    apps_found+=("${app_icon}" "$app_name" "$app_category")
                fi
            done

            if [ ${#apps_found[@]} -gt 0 ]; then
                selected_category2=$(GTK_THEME="${theme}" yad --title="Search Results for ${query}" --width=400 --height=300 --list --column="Icon:IMG" --column="App Name" --column="Category" "${apps_found[@]}" --borders=10)
                if [ -n "$selected_category2" ]; then
                    app_details_page "$selected_category2"
                fi
            else
                GTK_THEME="${theme}" yad --title="Search Results for ${query}" --width=300 --height=100 --text="No apps found for '${query}'.\nPlease try another query." --borders=10 --button="OK:0" --center
                show_app_store
            fi
        else
            show_app_store
        fi
    }

    selected_category_raw=$(GTK_THEME="${theme}" yad --text "$random_announcement" --width="$APP_STORE_WIDTH" --height="$APP_STORE_HEIGHT" --columns="3" \
        "${list_items[@]}" \
        --list --image="${DIRECTORY}/images/logo/logo-64.png" --window-icon="${DIRECTORY}/images/logo/logo-64.png" --image-on-top --title "$APP_STORE_NAME" --column "Icon:IMG" --column "Category" --button "!${DIRECTORY}/images/button/search.png"!"Search":44 --button "!${DIRECTORY}/images/categories/Internet.png"!"check_all_if_installed":55 --button "!${DIRECTORY}/images/button/settings.png"!"Settings":"bash -c '${DIRECTORY}/tools/settings'" --no-headers --item-height="$welcome_height" --timeout=0 --no-close)
    exval=$?
    selected_category="${selected_category_raw//|/}"

    if [ "$exval" == "44" ]; then
        search_apps
	elif [ "$exval" == "55" ]; then
        check_all_if_installed
    elif [ -n "$selected_category" ]; then
        show_apps_in_category "$selected_category"
    fi
}

keep_sudo_refresed(){
	while true
	do
			sudo true
			sleep 10m
	done
}

theme=$(theme_get)
export GTK_THEME="${theme}"
apps_as_root_yad true
keep_sudo_refresed &
source_ext_functions_and_var
show_app_store
