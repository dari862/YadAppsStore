#!/bin/bash
set -e

DIRECTORY="$(dirname "$(readlink -f "$0")")"
DIRECTORY="$(dirname "$DIRECTORY")"
categories_dir="${DIRECTORY}/Categories"
installed_dir="${categories_dir}/installed"
yadstore_conf_dir="${DIRECTORY}/etc"
yadstore_conf_file="${yadstore_conf_dir}/config"
yadstore_temp_dir="/tmp/yadstore_"
case "$(uname -m)" in
	x86_64|aarch64)
		architecture=64
	;;
	i686|armv7l)
		architecture=32
	;;
	*)
		echo "Unknown architecture" && exit 1
	;;
esac
	
if [[ ! -f "${yadstore_conf_file}" ]];then
	mkdir -p ${yadstore_conf_dir}
	__cpu_op_mode_32=""
	__cpu_op_mode_64=""
	__cpu_op_modes=""
	__os_id=""
	__os_desc=""
	__os_release=""
	__os_codename=""
	
	if [ -z "$__os_id" ] || [ -z "$__os_desc" ] || [ -z "$__os_release" ] || [ -z "$__os_codename" ]; then
		if lsb_release -a -u &>/dev/null; then
			# This is a Ubuntu Derivative, checking the upstream-release version info
			mapfile -t os_u < <(lsb_release -s -i -d -r -c -u)
			echo "__os_id=\"${os_u[0]}\"" >> "${yadstore_conf_file}"
			echo "__os_desc=\"${os_u[1]}\"" >> "${yadstore_conf_file}"
			echo "__os_release=\"${os_u[2]}\"" >> "${yadstore_conf_file}"
			echo "__os_codename=\"${os_u[3]}\"" >> "${yadstore_conf_file}"
			mapfile -t os < <(lsb_release -s -i -d -r -c)
			echo "__os_original_id=\"${os[0]}\"" >> "${yadstore_conf_file}"
			echo "__os_original_desc=\"${os[1]}\"" >> "${yadstore_conf_file}"
			echo "__os_original_release=\"${os[2]}\"" >> "${yadstore_conf_file}"
			echo "__os_original_codename=\"${os[3]}\"" >> "${yadstore_conf_file}"
		elif [ -f /etc/upstream-release/lsb-release ]; then
			# ubuntu 22.04+ Linux Mint no longer includes the lsb_release -u option
			# add a parser for the /etc/upstream-release/lsb-release file
			source /etc/upstream-release/lsb-release
			echo "__os_id=\"$DISTRIB_ID\"" >> "${yadstore_conf_file}"
			echo "__os_desc=\"$DISTRIB_DESCRIPTION\"" >> "${yadstore_conf_file}"
			echo "__os_release=\"$DISTRIB_RELEASE\"" >> "${yadstore_conf_file}"
			echo "__os_codename=\"$DISTRIB_CODENAME\"" >> "${yadstore_conf_file}"
			mapfile -t os < <(lsb_release -s -i -d -r -c)
			echo "__os_original_id=\"${os[0]}\"" >> "${yadstore_conf_file}"
			echo "__os_original_desc=\"${os[1]}\"" >> "${yadstore_conf_file}"
			echo "__os_original_release=\"${os[2]}\"" >> "${yadstore_conf_file}"
			echo "__os_original_codename=\"${os[3]}\"" >> "${yadstore_conf_file}"
			unset DISTRIB_ID DISTRIB_DESCRIPTION DISTRIB_RELEASE DISTRIB_CODENAME
		elif [ -f /etc/lsb-release.diverted ]; then
			# ubuntu 22.04+ Pop!_OS no longer includes the /etc/upstream-release/lsb-release or the lsb_release -u option
			# add a parser for the new /etc/lsb-release.diverted file
			source /etc/lsb-release.diverted
			echo "__os_id=\"$DISTRIB_ID\"" >> "${yadstore_conf_file}"
			echo "__os_desc=\"$DISTRIB_DESCRIPTION\"" >> "${yadstore_conf_file}"
			echo "__os_release=\"$DISTRIB_RELEASE\"" >> "${yadstore_conf_file}"
			echo "__os_codename=\"$DISTRIB_CODENAME\"" >> "${yadstore_conf_file}"
			mapfile -t os < <(lsb_release -s -i -d -r -c)
			echo "__os_original_id=\"${os[0]}\"" >> "${yadstore_conf_file}"
			echo "__os_original_desc=\"${os[1]}\"" >> "${yadstore_conf_file}"
			echo "__os_original_release=\"${os[2]}\"" >> "${yadstore_conf_file}"
			echo "__os_original_codename=\"${os[3]}\"" >> "${yadstore_conf_file}"
			unset DISTRIB_ID DISTRIB_DESCRIPTION DISTRIB_RELEASE DISTRIB_CODENAME
		else
			mapfile -t os < <(lsb_release -s -i -d -r -c)
			echo "__os_id=\"${os[0]}\"" >> "${yadstore_conf_file}"
			echo "__os_desc=\"${os[1]}\"" >> "${yadstore_conf_file}"
			echo "__os_release=\"${os[2]}\"" >> "${yadstore_conf_file}"
			echo "__os_codename=\"${os[3]}\"" >> "${yadstore_conf_file}"
		fi
	fi
	
	# add CPU op-modes for all scripts to use
	if ([ -z "$__cpu_op_mode_32" ] && [ -z "$__cpu_op_mode_64" ]) || [ -z "$__cpu_op_modes" ]; then
		if lscpu | grep "CPU op-mode(s):" | grep -q "32-bit, 64-bit"; then
			echo "__cpu_op_modes=\"32/64\"" >> "${yadstore_conf_file}"
			echo "__cpu_op_mode_32=true" >> "${yadstore_conf_file}"
			echo "__cpu_op_mode_64=true" >> "${yadstore_conf_file}"
		elif lscpu | grep "CPU op-mode(s):" | grep -q "32-bit"; then
			echo "__cpu_op_modes=\"32\"" >> "${yadstore_conf_file}"
			echo "__cpu_op_mode_32=true" >> "${yadstore_conf_file}"
		elif lscpu | grep "CPU op-mode(s):" | grep -q "64-bit"; then
			echo "__cpu_op_modes=\"64\"" >> "${yadstore_conf_file}"
			echo "__cpu_op_mode_64=true" >> "${yadstore_conf_file}"
		fi
	fi
	
	#determine if host system is 64 bit arm64 or 32 bit armhf
	if [ "$(od -An -t x1 -j 4 -N 1 "$(readlink -f /sbin/init)")" = ' 02' ];then
		echo "arch=64" >> "${yadstore_conf_file}"
	elif [ "$(od -An -t x1 -j 4 -N 1 "$(readlink -f /sbin/init)")" = ' 01' ];then
		echo "arch=32" >> "${yadstore_conf_file}"
	else
		error "Failed to detect OS CPU architecture! Something is very wrong."
	fi
	
	case "$(uname -m)" in
		x86_64|aarch64)
			echo "architecture=64" >> ${yadstore_conf_file}
		;;
		i686|armv7l)
			echo "architecture=32" >> ${yadstore_conf_file}
		;;
		*)
			echo "Unknown architecture" >> ${yadstore_conf_file}
		;;
	esac
	
	echo "yadeditor=xdg-open" >> "${yadstore_conf_file}"
	
	echo "DIRECTORY=\"${DIRECTORY}\"" >> "${yadstore_conf_file}"
	echo "categories_dir=\"${DIRECTORY}/Categories\"" >> "${yadstore_conf_file}"
fi

cd "${DIRECTORY}"/apps

for app_dir in *; do
	packages_file="$app_dir/packages"
	# Check if the install script or architecture-specific install scripts exist for this app
	if [ -e "$packages_file" ]; then
		cat "$packages_file" >> "${app_dir}/check"
	else
		if [ -d "${app_dir}" ];then
			if grep -q "flatpak_install " "${app_dir}/install";then 
				grep "flatpak_install " "${app_dir}/install" | sed 's/flatpak_install //g;s/ || exit 1//g' > "${app_dir}/check"
			elif grep -q "git_clone " "${app_dir}/install";then 
				grep "git_clone " "${app_dir}/install" | grep -o 'http[s]\?://[^ ]\+' | head -1 | grep -oP '[^/\n]+$' | sed 's/.git//g' > "${app_dir}/check"
			elif grep -q "/.local/share/applications/" "${app_dir}/install";then 
				grep "/.local/share/applications/" "${app_dir}/install" | grep -oP '(?<=/.local/share/applications/).*?(.desktop)' > "${app_dir}/check"
			elif grep -q 'wget -O /tmp/' "${app_dir}/install";then 
			 	grep 'wget -O /tmp/' "${app_dir}/install" | grep -oP '(?<=/tmp/).*?( )' | awk -F. '{print $1}' > "${app_dir}/check"
			elif [[ "${app_dir}" == 'Angry IP scanner' ]];then
				echo "ipscan" > "${app_dir}/check"
			elif [[ "${app_dir}" == "BalenaEtcher" ]];then
				echo "balena-etcher" > "${app_dir}/check"
			elif [[ "${app_dir}" == 'Better Chromium' ]];then
				echo "chromium" > "${app_dir}/check"
			elif [[ "${app_dir}" == 'Clam Antivirus' ]];then
				echo "clamav" > "${app_dir}/check"
			elif [[ "${app_dir}" == 'Conky Rings' ]];then
				echo "/.conky_rings.lua" > "${app_dir}/check"
			elif [[ "${app_dir}" == 'Electron Fiddle' ]];then
				echo "electron-fiddle" > "${app_dir}/check"
			elif [[ "${app_dir}" == 'Firefox Rapid Release' ]];then
				echo "firefox " > "${app_dir}/check"
			elif [[ "${app_dir}" == 'Gnome Software' ]];then
				echo "gnome-software-plugin-flatpak" > "${app_dir}/check"
			elif [[ "${app_dir}" == "Lokinet" ]];then
				echo "lokinet-gui" > "${app_dir}/check"
			elif [[ "${app_dir}" == 'Minecraft Java Prism Launcher' ]];then
				echo "prismlauncher" > "${app_dir}/check"
			elif [[ "${app_dir}" == "Node.js" ]];then
				echo "nvm" > "${app_dir}/check"
			elif [[ "${app_dir}" == 'Persepolis Download Manager' ]];then
				echo "persepolis" > "${app_dir}/check"
			elif [[ "${app_dir}" == 'Processing IDE' ]];then
				echo "processing" > "${app_dir}/check"
			elif [[ "${app_dir}" == 'Renoise (Demo)' ]];then
				echo "renoise" > "${app_dir}/check"
			elif [[ "${app_dir}" == 'Snap Store' ]];then
				echo "snap" > "${app_dir}/check"
			elif [[ "${app_dir}" == 'Sublime Merge' ]];then
				echo "sublime-merge" > "${app_dir}/check"
			elif [[ "${app_dir}" == 'System Monitoring Center' ]];then
				echo "system-monitoring-center" > "${app_dir}/check"
			elif [[ "${app_dir}" == "VSCodium" ]];then
				echo "codium" > "${app_dir}/check"
			elif [[ "${app_dir}" == 'Web Apps' ]];then
				echo "webapp-manager" > "${app_dir}/check"
			elif [[ "${app_dir}" == 'Xtreme Download Manager' ]];then
				echo "xdm" > "${app_dir}/check"
			else
				echo "${app_dir,,}" | tr -d ' ' > "${app_dir}/check"
			fi
		fi
	fi  	
done

if [ ! -d "${categories_dir}" ]; then
	cd "${DIRECTORY}"
	install_script_arch="install-$architecture"
	mkdir -p "${installed_dir}"
	for app_dir in apps/*; do
		app_name=$(basename "$app_dir")
		category_file="apps/$app_name/category"
		install_script="$app_dir/install"
		packages_file="$app_dir/packages"
		category_is="$(cat "$category_file")"
		category_dir="${yadstore_temp_dir}/${category_is}"
		install_this=""
		mkdir -p "${category_dir}"
		# Check if the install script or architecture-specific install scripts exist for this app
		if [ -e "$packages_file" ]; then
			mkdir -p "${category_dir}/$app_name"
			packages_file_contant="$(cat "$packages_file")"
			echo '#!/bin/bash' > "${category_dir}/$app_name/install"
			echo "install_packages ${packages_file_contant}" >> "${category_dir}/$app_name/install"
			chmod +x "${category_dir}/$app_name/install" &>/dev/null
			echo '#!/bin/bash' > "${category_dir}/$app_name/uninstall"
			echo "purge_packages ${packages_file_contant}" >> "${category_dir}/$app_name/uninstall"
			chmod +x "${category_dir}/$app_name/uninstall" &>/dev/null
			cp -r "$app_dir/check" "${category_dir}/$app_name"
		elif [ -e "$install_script" ]; then
			mkdir -p "${category_dir}/$app_name"
			cp -r "$app_dir/install" "${category_dir}/$app_name"
			cp -r "$app_dir/uninstall" "${category_dir}/$app_name"
			cp -r "$app_dir/check" "${category_dir}/$app_name"
		elif [ -e "$app_dir/$install_script_arch" ]; then
			mkdir -p "${category_dir}/$app_name"
			cp -r "$app_dir/$install_script_arch" "${category_dir}/$app_name/install"
			cp -r "$app_dir/uninstall" "${category_dir}/$app_name"
			cp -r "$app_dir/check" "${category_dir}/$app_name"
		fi
		check_this="$(cat "${category_dir}/${app_name}/check")"
		if [[ "$check_this" == *".desktop" ]];then 
			[ -f "$HOME/.local/share/applications/${check_this}" ] && install_this="true"
			[ -f "/usr/share/applications/${check_this}" ] && install_this="true" 
		elif [[ "$check_this" == *"."* ]];then
			if command -v flatpak &>/dev/null ;then 
				flatpak list | grep ${check_this} && install_this="true" 
			fi
		elif command -v ${check_this} &>/dev/null ;then 
			install_this="true"
		else
			dpkg-query -s ${check_this} &>/dev/null && install_this="true" 
		fi
		
		if [[ "$install_this" == "true" ]];then 
			mv "${category_dir}/$app_name" "${installed_dir}"
		fi
	done
	sudo mkdir -p "${categories_dir}"
	sudo mv "${yadstore_temp_dir}"/* "${categories_dir}"
	sudo chown root:root -R "${categories_dir}"
fi
